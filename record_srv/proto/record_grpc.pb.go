// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: record.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Record_CreateRecord_FullMethodName      = "/Record/CreateRecord"
	Record_GetAllRecordByUID_FullMethodName = "/Record/GetAllRecordByUID"
	Record_GetRecordByID_FullMethodName     = "/Record/GetRecordByID"
	Record_UpdateRecord_FullMethodName      = "/Record/UpdateRecord"
)

// RecordClient is the client API for Record service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RecordClient interface {
	CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*RecordInfo, error)
	GetAllRecordByUID(ctx context.Context, in *UIDRequest, opts ...grpc.CallOption) (*RecordInfoList, error)
	GetRecordByID(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*RecordInfo, error)
	UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*RecordInfo, error)
}

type recordClient struct {
	cc grpc.ClientConnInterface
}

func NewRecordClient(cc grpc.ClientConnInterface) RecordClient {
	return &recordClient{cc}
}

func (c *recordClient) CreateRecord(ctx context.Context, in *CreateRecordRequest, opts ...grpc.CallOption) (*RecordInfo, error) {
	out := new(RecordInfo)
	err := c.cc.Invoke(ctx, Record_CreateRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) GetAllRecordByUID(ctx context.Context, in *UIDRequest, opts ...grpc.CallOption) (*RecordInfoList, error) {
	out := new(RecordInfoList)
	err := c.cc.Invoke(ctx, Record_GetAllRecordByUID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) GetRecordByID(ctx context.Context, in *IDRequest, opts ...grpc.CallOption) (*RecordInfo, error) {
	out := new(RecordInfo)
	err := c.cc.Invoke(ctx, Record_GetRecordByID_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *recordClient) UpdateRecord(ctx context.Context, in *UpdateRecordRequest, opts ...grpc.CallOption) (*RecordInfo, error) {
	out := new(RecordInfo)
	err := c.cc.Invoke(ctx, Record_UpdateRecord_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RecordServer is the server API for Record service.
// All implementations must embed UnimplementedRecordServer
// for forward compatibility
type RecordServer interface {
	CreateRecord(context.Context, *CreateRecordRequest) (*RecordInfo, error)
	GetAllRecordByUID(context.Context, *UIDRequest) (*RecordInfoList, error)
	GetRecordByID(context.Context, *IDRequest) (*RecordInfo, error)
	UpdateRecord(context.Context, *UpdateRecordRequest) (*RecordInfo, error)
	mustEmbedUnimplementedRecordServer()
}

// UnimplementedRecordServer must be embedded to have forward compatible implementations.
type UnimplementedRecordServer struct {
}

func (UnimplementedRecordServer) CreateRecord(context.Context, *CreateRecordRequest) (*RecordInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRecord not implemented")
}
func (UnimplementedRecordServer) GetAllRecordByUID(context.Context, *UIDRequest) (*RecordInfoList, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllRecordByUID not implemented")
}
func (UnimplementedRecordServer) GetRecordByID(context.Context, *IDRequest) (*RecordInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecordByID not implemented")
}
func (UnimplementedRecordServer) UpdateRecord(context.Context, *UpdateRecordRequest) (*RecordInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateRecord not implemented")
}
func (UnimplementedRecordServer) mustEmbedUnimplementedRecordServer() {}

// UnsafeRecordServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RecordServer will
// result in compilation errors.
type UnsafeRecordServer interface {
	mustEmbedUnimplementedRecordServer()
}

func RegisterRecordServer(s grpc.ServiceRegistrar, srv RecordServer) {
	s.RegisterService(&Record_ServiceDesc, srv)
}

func _Record_CreateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).CreateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Record_CreateRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).CreateRecord(ctx, req.(*CreateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_GetAllRecordByUID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).GetAllRecordByUID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Record_GetAllRecordByUID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).GetAllRecordByUID(ctx, req.(*UIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_GetRecordByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).GetRecordByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Record_GetRecordByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).GetRecordByID(ctx, req.(*IDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Record_UpdateRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RecordServer).UpdateRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Record_UpdateRecord_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RecordServer).UpdateRecord(ctx, req.(*UpdateRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Record_ServiceDesc is the grpc.ServiceDesc for Record service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Record_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Record",
	HandlerType: (*RecordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRecord",
			Handler:    _Record_CreateRecord_Handler,
		},
		{
			MethodName: "GetAllRecordByUID",
			Handler:    _Record_GetAllRecordByUID_Handler,
		},
		{
			MethodName: "GetRecordByID",
			Handler:    _Record_GetRecordByID_Handler,
		},
		{
			MethodName: "UpdateRecord",
			Handler:    _Record_UpdateRecord_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "record.proto",
}
