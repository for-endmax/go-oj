// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.19.1
// source: question.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Question_GetQuestionList_FullMethodName = "/Question/GetQuestionList"
	Question_GetQuestionInfo_FullMethodName = "/Question/GetQuestionInfo"
	Question_AddQuestion_FullMethodName     = "/Question/AddQuestion"
	Question_DelQuestion_FullMethodName     = "/Question/DelQuestion"
	Question_UpdateQuestion_FullMethodName  = "/Question/UpdateQuestion"
	Question_GetTestInfo_FullMethodName     = "/Question/GetTestInfo"
	Question_AddTest_FullMethodName         = "/Question/AddTest"
	Question_DelTest_FullMethodName         = "/Question/DelTest"
	Question_UpdateTest_FullMethodName      = "/Question/UpdateTest"
)

// QuestionClient is the client API for Question service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type QuestionClient interface {
	GetQuestionList(ctx context.Context, in *PageInfoRequest, opts ...grpc.CallOption) (*QuestionListInfoResponse, error)
	GetQuestionInfo(ctx context.Context, in *GetQuestionInfoRequest, opts ...grpc.CallOption) (*QuestionInfoResponse, error)
	AddQuestion(ctx context.Context, in *AddQuestionRequest, opts ...grpc.CallOption) (*QuestionInfoResponse, error)
	DelQuestion(ctx context.Context, in *DelQuestionRequest, opts ...grpc.CallOption) (*DelQuestionResponse, error)
	UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error)
	GetTestInfo(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*TestInfoListResponse, error)
	AddTest(ctx context.Context, in *AddTestRequest, opts ...grpc.CallOption) (*TestInfoResponse, error)
	DelTest(ctx context.Context, in *DelTestRequest, opts ...grpc.CallOption) (*DelTestResponse, error)
	UpdateTest(ctx context.Context, in *UpdateTestRequest, opts ...grpc.CallOption) (*UpdateTestResponse, error)
}

type questionClient struct {
	cc grpc.ClientConnInterface
}

func NewQuestionClient(cc grpc.ClientConnInterface) QuestionClient {
	return &questionClient{cc}
}

func (c *questionClient) GetQuestionList(ctx context.Context, in *PageInfoRequest, opts ...grpc.CallOption) (*QuestionListInfoResponse, error) {
	out := new(QuestionListInfoResponse)
	err := c.cc.Invoke(ctx, Question_GetQuestionList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) GetQuestionInfo(ctx context.Context, in *GetQuestionInfoRequest, opts ...grpc.CallOption) (*QuestionInfoResponse, error) {
	out := new(QuestionInfoResponse)
	err := c.cc.Invoke(ctx, Question_GetQuestionInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) AddQuestion(ctx context.Context, in *AddQuestionRequest, opts ...grpc.CallOption) (*QuestionInfoResponse, error) {
	out := new(QuestionInfoResponse)
	err := c.cc.Invoke(ctx, Question_AddQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) DelQuestion(ctx context.Context, in *DelQuestionRequest, opts ...grpc.CallOption) (*DelQuestionResponse, error) {
	out := new(DelQuestionResponse)
	err := c.cc.Invoke(ctx, Question_DelQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) UpdateQuestion(ctx context.Context, in *UpdateQuestionRequest, opts ...grpc.CallOption) (*UpdateQuestionResponse, error) {
	out := new(UpdateQuestionResponse)
	err := c.cc.Invoke(ctx, Question_UpdateQuestion_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) GetTestInfo(ctx context.Context, in *GetTestRequest, opts ...grpc.CallOption) (*TestInfoListResponse, error) {
	out := new(TestInfoListResponse)
	err := c.cc.Invoke(ctx, Question_GetTestInfo_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) AddTest(ctx context.Context, in *AddTestRequest, opts ...grpc.CallOption) (*TestInfoResponse, error) {
	out := new(TestInfoResponse)
	err := c.cc.Invoke(ctx, Question_AddTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) DelTest(ctx context.Context, in *DelTestRequest, opts ...grpc.CallOption) (*DelTestResponse, error) {
	out := new(DelTestResponse)
	err := c.cc.Invoke(ctx, Question_DelTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *questionClient) UpdateTest(ctx context.Context, in *UpdateTestRequest, opts ...grpc.CallOption) (*UpdateTestResponse, error) {
	out := new(UpdateTestResponse)
	err := c.cc.Invoke(ctx, Question_UpdateTest_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// QuestionServer is the server API for Question service.
// All implementations must embed UnimplementedQuestionServer
// for forward compatibility
type QuestionServer interface {
	GetQuestionList(context.Context, *PageInfoRequest) (*QuestionListInfoResponse, error)
	GetQuestionInfo(context.Context, *GetQuestionInfoRequest) (*QuestionInfoResponse, error)
	AddQuestion(context.Context, *AddQuestionRequest) (*QuestionInfoResponse, error)
	DelQuestion(context.Context, *DelQuestionRequest) (*DelQuestionResponse, error)
	UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error)
	GetTestInfo(context.Context, *GetTestRequest) (*TestInfoListResponse, error)
	AddTest(context.Context, *AddTestRequest) (*TestInfoResponse, error)
	DelTest(context.Context, *DelTestRequest) (*DelTestResponse, error)
	UpdateTest(context.Context, *UpdateTestRequest) (*UpdateTestResponse, error)
	mustEmbedUnimplementedQuestionServer()
}

// UnimplementedQuestionServer must be embedded to have forward compatible implementations.
type UnimplementedQuestionServer struct {
}

func (UnimplementedQuestionServer) GetQuestionList(context.Context, *PageInfoRequest) (*QuestionListInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionList not implemented")
}
func (UnimplementedQuestionServer) GetQuestionInfo(context.Context, *GetQuestionInfoRequest) (*QuestionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetQuestionInfo not implemented")
}
func (UnimplementedQuestionServer) AddQuestion(context.Context, *AddQuestionRequest) (*QuestionInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddQuestion not implemented")
}
func (UnimplementedQuestionServer) DelQuestion(context.Context, *DelQuestionRequest) (*DelQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelQuestion not implemented")
}
func (UnimplementedQuestionServer) UpdateQuestion(context.Context, *UpdateQuestionRequest) (*UpdateQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateQuestion not implemented")
}
func (UnimplementedQuestionServer) GetTestInfo(context.Context, *GetTestRequest) (*TestInfoListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTestInfo not implemented")
}
func (UnimplementedQuestionServer) AddTest(context.Context, *AddTestRequest) (*TestInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddTest not implemented")
}
func (UnimplementedQuestionServer) DelTest(context.Context, *DelTestRequest) (*DelTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelTest not implemented")
}
func (UnimplementedQuestionServer) UpdateTest(context.Context, *UpdateTestRequest) (*UpdateTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTest not implemented")
}
func (UnimplementedQuestionServer) mustEmbedUnimplementedQuestionServer() {}

// UnsafeQuestionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to QuestionServer will
// result in compilation errors.
type UnsafeQuestionServer interface {
	mustEmbedUnimplementedQuestionServer()
}

func RegisterQuestionServer(s grpc.ServiceRegistrar, srv QuestionServer) {
	s.RegisterService(&Question_ServiceDesc, srv)
}

func _Question_GetQuestionList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).GetQuestionList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_GetQuestionList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).GetQuestionList(ctx, req.(*PageInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_GetQuestionInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetQuestionInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).GetQuestionInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_GetQuestionInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).GetQuestionInfo(ctx, req.(*GetQuestionInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_AddQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).AddQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_AddQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).AddQuestion(ctx, req.(*AddQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_DelQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).DelQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_DelQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).DelQuestion(ctx, req.(*DelQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_UpdateQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).UpdateQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_UpdateQuestion_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).UpdateQuestion(ctx, req.(*UpdateQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_GetTestInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).GetTestInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_GetTestInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).GetTestInfo(ctx, req.(*GetTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_AddTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).AddTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_AddTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).AddTest(ctx, req.(*AddTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_DelTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).DelTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_DelTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).DelTest(ctx, req.(*DelTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Question_UpdateTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(QuestionServer).UpdateTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Question_UpdateTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(QuestionServer).UpdateTest(ctx, req.(*UpdateTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Question_ServiceDesc is the grpc.ServiceDesc for Question service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Question_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Question",
	HandlerType: (*QuestionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetQuestionList",
			Handler:    _Question_GetQuestionList_Handler,
		},
		{
			MethodName: "GetQuestionInfo",
			Handler:    _Question_GetQuestionInfo_Handler,
		},
		{
			MethodName: "AddQuestion",
			Handler:    _Question_AddQuestion_Handler,
		},
		{
			MethodName: "DelQuestion",
			Handler:    _Question_DelQuestion_Handler,
		},
		{
			MethodName: "UpdateQuestion",
			Handler:    _Question_UpdateQuestion_Handler,
		},
		{
			MethodName: "GetTestInfo",
			Handler:    _Question_GetTestInfo_Handler,
		},
		{
			MethodName: "AddTest",
			Handler:    _Question_AddTest_Handler,
		},
		{
			MethodName: "DelTest",
			Handler:    _Question_DelTest_Handler,
		},
		{
			MethodName: "UpdateTest",
			Handler:    _Question_UpdateTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "question.proto",
}
